#!/bin/bash
ABSOLUTE_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/$(basename "${BASH_SOURCE[0]}")"
ws_playground_dir=$(dirname $(dirname "$ABSOLUTE_PATH"))/playgrounds
_data_file_port=12332
kill() {
	__enable_python_env
  echo "About to kill all processes" 
  __launch kill 
}

venv()
{
	if [[ -n ".venv" ]]; then
		python3 -m venv .venv;
	fi
	__enable_python_env
	pip3 install mtools 
}

help(){
    echo
    echo -e "\033[1;4;32m""Functions:""\033[0;34m"
    compgen -A function
    echo
    echo -e "\033[1;4;32m""Aliases:""\033[0;34m"
    compgen -A alias
    echo
    echo -e "\033[0m"
}

list()
{
	__enable_python_env
	__launch list
}

clean() {
  kill
  echo "erasing data on $__dir"
  $__cmd_prefix rm -rf $__dir
}

launch()
{
	__enable_python_env
	__launch $@ 
}

init()
{
	__enable_python_env
	__init $@
}

initd()
{
	__enable_python_env
	__init --single $@
}

init-replica()
{
	__enable_python_env
	__init --replicaset --nodes 3 $@
}

#1 nodes x 2 shards + 1 node csrs
init-lite()
{
	__enable_python_env

	__init --replicaset --nodes 1 --sharded 2 $@

}

#3 nodes x 2 shards + 3 node csrs
init-cluster()
{
	__enable_python_env
	__init --replicaset --nodes 3 --sharded 2 --config 3 $@
}

init-from-url()
{
	__enable_python_env
	$_url=$__args[0]
	[[ -z $_url ]] && echo "Please run mcluster init-from-url <url>" && return 1;
	regex='(https?|ftp|file)://[-[:alnum:]\+&@#/%?=~_|!:,.;]*[-[:alnum:]\+&@#/%=~_|]'
	if [[ $_url =~ $regex ]]; then
		wget -O - $_url | tar xzvf - -C /tmp
		init-from-dbpath "/tmp/data/db/job0/resmoke/"
	else
		echo "Invalid url"
	fi
}

init-from-dbpath()
{
	#if cluster already present, ask for confirmation
	__enable_python_env

	echo "Checking if cluster already present in $__dir"
	[[ -d $__dir ]] && ( read -p "Cluster already present, are you sure you want to overwrite it? [y/n]" && [[ $REPLY =~ ^[Yy]$ ]] || return 1 );

	echo "about to clean"
	clean
	echo "cleaned"
	_dbpath=$1
	[[ -z $_dbpath ]] && echo "Please run mcluster init-from-dbpath <dbpath>" && return 1;
	__enable_python_env

	_numshardnode=$(find $1/shard0* -maxdepth 1 -type d|wc -l)
	_numshardnode=$(echo $_numshardnode -1 | bc )
	_numshards=$(find $1/shard* -maxdepth 0 -type d|wc -l) 
	_numcsrsnode=$(find $1/config* -maxdepth 1 -type d|wc -l)
	_numcsrsnode=$(echo $_numcsrsnode -1 | bc )

	echo "Found nshard $_numshards with nodes $_numshardnode and csrs with nodes $_numcsrsnode"
	#generate a 
	__init --replicaset --nodes $_numshardnode --sharded $_numshards --config $_numcsrsnode $@
	kill #kill all processes 
	echo "Copying data from $_dbpath to $__dir"
	for d in "$_dbpath"/*; do
		#copy shards data
		#check if d is config
		if [[ $d == *"config"* ]]; then
			#copy config data
			for countc in $(seq 0 $_numcsrsnode); do
				local countrs=$(echo $countc + 1 | bc);
				local from_dir="$d/node$countc"
				local to_dir="$__dir/configRepl/rs$countrs/db"
				echo "Found $from_dir"
				if [ -d "$from_dir" ]; then
					echo "Copying from $from_dir to $to_dir"
					cp -r $from_dir $to_dir
				fi
			done
		else
			for countn in $(seq 0 $_numshardnode); do
				#move from dbpath/shard0/node0 to _dir/shard01/rs1/db 
				#move from dbpath/shard0/node1 to _dir/shard01/rs2/db
				#move from dbpath/shard1/node0 to _dir/shard02/rs1/db
				#etc... 
				local countrs=$(echo $countn + 1 | bc);
				#get shard number: extract last number from string and remove leading zeros, then add 1
				local counts=$(echo $d | grep -o '[0-9]\+' | tail -1)
				local counts=$(echo $counts + 1 | bc);
				local from_dir="$d/node$countn"
				local to_dir="$__dir/shard0$counts/rs$countrs/db"
				echo "Found $from_dir"
				if [[ -d "$from_dir" ]]; then
					echo "Copying from $from_dir to $to_dir"
					cp -r $from_dir $to_dir
				fi
			done
		fi
	done

	#start again cluster
	start
}

start()
{
	__enable_python_env
	__launch start --dir $__dir
}
connect()
{
	echo "connecting to $1"

	__enable_python_env
	local port=$1;
	[[ -z $1 ]] && port=27017;
	 $__cmd_prefix mongosh --port $port && return 0;
}

connect-data-file()
{
	pkill -9 mongo
	pkill -9 mongod
	echo `mongod --version`
	echo `mongosh --version`
	$__cmd_prefix mongod --port 12332 --dbpath $1 --setParameter recoverFromOplogAsStandalone=true > /tmp/tmp.log &
	echo "waiting 5 seconds before running console ..." && $__cmd_prefix sleep 5 && $__cmd_prefix mongosh --port $_data_file_port
}

print-oplog()
{
	[[ -z $1 ]] && echo "Usage mcluster print-oplog <tag> <port>. tag required to the output file oplog_results_<tag>.json"
	[[ -z $2 ]] && echo "Usage mcluster print-oplog <tag> <port>. port required to select the connection"

	mongoexport --db=local --collection=oplog.rs --query='{}' --fields='ts,op,ns,o' --sort='{"$natural":-1}' --out=oplog_results_$1.json --host="localhost:$2"
}


#private ----------------------------------------

__launch()
{
	$__cmd_prefix mlaunch $@ --dir $__dir 
}

__init()
{
	echo "ready to init..."
	__launch init $@ 
}

__enable_python_env()
{
	echo "enabling python env"
	$__cmd_prefix . .venv/bin/activate
}

__set()
{
	#first argument it s one command , followings are arguments
	if [ -z "$__cmd" ]; then 
		__cmd=$1;
	else
		__args="$__args $1"
	fi
}

__add_to_path ()
{	
	#add to PATH if not already there
    if [[ "$PATH" =~ (^|:)"${1}"(:|$) ]]
    then
        return 0
    fi
    export PATH=${1}:$PATH
}

link()
{
	while [[ $# -gt 0 ]]; do
		__folder=;
		case $1 in
			".")
				__add_to_path ./bazel-last-build;
				shift;
			;;
			"")
				__add_to_path ./bazel-last-build
				shift;
			;;
			--mongo1)
				__folder="mongo"
				shift
			;;
			--mongo2)
				__folder="mongo2"
				shift
			;;
			--mongo3)
			    __folder="mongo3"
				shift
			;;
			--v*)
				__mongo_branch=${1#*--}
				__folder="mongo-$__mongo_branch"
				shift
			;;
			*)
				[[ -z $1 ]] && echo "Please provide a version or mongo1/mongo2/mongo3 to link the master local folder"
				unlink ~/.local/bin
				unlink ~/.local/lib
				m $1
				shift
			;;
		esac;
	done;

	[[ -z $__folder ]] && exit 0;

	echo "provided custom master folder ~/$__folder/bazel-last-bin/"
	unlink ~/.local/bin/mongod
	unlink ~/.local/bin/mongos
	unlink ~/.local/lib 
	ln -s ~/$__folder/bazel-last-bin/mongod ~/.local/bin/mongod || return 1;
	ln -s ~/$__folder/bazel-last-bin/mongos ~/.local/bin/mongos || return 1;
	echo "~/$__folder/bazel-last-bin/ installed! Installing libs ...";
	#ln -s ~/$__folder/build/install/lib ~/.local/lib || return 1;
	echo "~/$__folder/build/install/lib installed!"

}

__parse_args()
{
	[[ -z ${__parsed_args} ]] && __parsed_args=true || return 0;

	__cmd_prefix=;
	__dir="$HOME/.mcluster/cdata/"
	_playground_dir="$HOME/.mcluster/pg"
	__cmd=;
	__args=;

	while [[ $# -gt 0 ]]; do
		case $1 in
			--echo)
				__cmd_prefix=echo;
				shift
			;;
			*)
				__set $1;
				shift
			;;
		esac;
	done;
}

__parse_args $@
echo "ready to $__cmd"
$__cmd $__args
echo "Stay committed"
