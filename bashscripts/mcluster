#!/bin/bash
ABSOLUTE_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/$(basename "${BASH_SOURCE[0]}")"
ws_playground_dir=$(dirname $(dirname "$ABSOLUTE_PATH"))/playgrounds
_data_file_port=12332
MCLUSTER_FOLDER=$HOME/.mcluster
VENV=$HOME/.mcluster/.venv
kill() {
	__enable_python_env
  echo "About to kill all processes" 
  __launch kill 
}

check-py()
{
	__enable_python_env
	which python3
}

check-mongod()
{
	__enable_python_env
	source $VENV/.mongo_paths
	which mongod
}

venv()
{
	if [[ -n "$VENV" ]]; then
		python3 -m venv $VENV;
	fi
	__enable_python_env
	pip3 install mtools 
	pip3 install psutil
	pip3 install packaging
	pip3 install python-dateutil
	pip3 install pymongo
}

help(){
    echo
    echo -e "\033[1;4;32m""Functions:""\033[0;34m"
    compgen -A function
    echo
    echo -e "\033[1;4;32m""Aliases:""\033[0;34m"
    compgen -A alias
    echo
    echo -e "\033[0m"
}

list()
{
	__enable_python_env
	__launch list
}

clean() {
  kill
  echo "erasing data on $__dir"
  $__cmd_prefix rm -rf $__dir
}

launch()
{
	__enable_python_env
	__launch $@ 
}

init()
{
	__enable_python_env
	__init $@
}

initd()
{
	__enable_python_env
	__init --single $@
}

init-replica()
{
	__enable_python_env
	__init --replicaset --nodes 3 $@
}

#1 nodes x 2 shards + 1 node csrs
init-lite()
{
	__enable_python_env
	__init --replicaset --nodes 1 --sharded 2 $@

}

#3 nodes x 2 shards + 3 node csrs
init-cluster()
{
	__enable_python_env
	__init --replicaset --nodes 3 --sharded 2 --config 3 $@
}

start()
{
	__enable_python_env
	__launch start --dir $__dir
}

connect()
{
	echo "connecting to $1"

	__enable_python_env
	local port=$1;
	[[ -z $1 ]] && port=27017;
	 $__cmd_prefix mongosh --port $port && return 0;
}


#private ----------------------------------------

__launch()
{
	$__cmd_prefix mlaunch $@ --dir $__dir 
}

__init()
{
	echo "ready to init..."
	source $VENV/.mongo_paths
	__launch init $@ 
}

__enable_python_env()
{
	echo "enabling python env"
	$__cmd_prefix . $VENV/bin/activate
}

__set()
{
	#first argument it s one command , followings are arguments
	if [ -z "$__cmd" ]; then 
		__cmd=$1;
	else
		__args="$__args $1"
	fi
}

__add_to_path ()
{	
	#add to PATH if not already there
    if [[ "$PATH" =~ (^|:)"${1}"(:|$) ]]
    then
        return 0
    fi
    export PATH=${1}:$PATH
	echo $PATH
}

link()
{
	while [[ $# -gt 0 ]]; do
		__folder=;
		case $1 in
            ".")
                echo "export PATH=./bazel-bin/src/mongo/db:\$PATH" > $VENV/.mongo_paths
                shift;
            ;;
            "")
                echo "export PATH=./bazel-bin/src/mongo/db:\$PATH" > $VENV/.mongo_paths
                shift;
            ;;
			--mongo1)
                echo "export PATH=~/mongo/bazel-bin/src/mongo/db:\$PATH" > $VENV/.mongo_paths
				shift
			;;
			--mongo2)
                echo "export PATH=~/mongo2/bazel-bin/src/mongo/db:\$PATH" > $VENV/.mongo_paths
				shift
			;;
			--mongo3)
                echo "export PATH=~/mongo3/bazel-bin/src/mongo/db:\$PATH" > $VENV/.mongo_paths
				shift
			;;
			*)
				[[ -z $1 ]] && echo "Please provide a version or mongo1/mongo2/mongo3 to link the master local folder"
				echo "export PATH=~/.local/bin:\$PATH" > $VENV/.mongo_paths
				m $1
				shift
			;;
		esac;
	done;

	echo "Success!"
}

__parse_args()
{
	[[ -z ${__parsed_args} ]] && __parsed_args=true || return 0;

	__cmd_prefix=;
	__dir="$MCLUSTER_FOLDER/cdata/"
	__cmd=;
	__args=;

	while [[ $# -gt 0 ]]; do
		case $1 in
			--echo)
				__cmd_prefix=echo;
				shift
			;;
			*)
				__set $1;
				shift
			;;
		esac;
	done;
}

__parse_args $@
echo "ready to $__cmd"
$__cmd $__args
echo "Stay committed"
