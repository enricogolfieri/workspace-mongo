# Resets the working tree to its initial state (as if it had just been cloned)
# and creates a Python virtual environment with all the requirements installed.
# All uncommitted changes and unversioned files will be lost (subject to
# confirmation by the user).
#
# Options:
#   - Branch: --master (default), --v5.3, --v5.0, --v4.4, --v4.2, --v4.0
#!/bin/bash

# Bazel guide https://wiki.corp.mongodb.com/display/HGTC/Building+with+Bazel

alias resmoke='python ./build/install/bin/resmoke.py'
_resmoke_cmd='python ./build/install/bin/resmoke.py'

######################################################## Install Virtual Environment ########################################################################

_mongo_update_venv_poetry_v81()
{
	( set -e;
	__mongo-check-wrkdir;
	__mongo-parse-args $@;
	${__cmd_prefix} ${MONGO_VENV_DIRNAME}/bin/python3 -m pip install 'poetry==2.0.0'
	${__cmd_prefix} export PYTHON_KEYRING_BACKEND=keyring.backends.null.Keyring
	${__cmo_prefix} buildscripts/poetry_sync.sh
	)

}

_mongo_update_venv_poetry_v80()
{
	( set -e;
	__mongo-check-wrkdir;
	__mongo-parse-args $@;
	${__cmd_prefix} ${MONGO_VENV_DIRNAME}/bin/python3 -m pip install 'poetry==2.0.0'
	${__cmd_prefix} export PYTHON_KEYRING_BACKEND=keyring.backends.null.Keyring
	${__cmd_prefix} ${MONGO_VENV_DIRNAME}/bin/python3 -m poetry install --no-root --sync
	${__cmo_prefix} buildscripts/poetry_sync.sh
	)

}
_mongo_update_venv_pip()
{
	( set -e;
	__mongo-check-wrkdir;
	__mongo-parse-args $@;
	${__cmd_prefix} ${MONGO_VENV_DIRNAME}/bin/python3 -m pip install -r buildscripts/requirements.txt

	#install db-contrib-tools
	${__cmd_prefix} ${MONGO_VENV_DIRNAME}/bin/python3  -m pip install pipx
	${__cmd_prefix} ${MONGO_VENV_DIRNAME}/bin/python3  -m pipx ensurepath
	${__cmd_prefix} ${MONGO_VENV_DIRNAME}/bin/python3  -m pipx install db-contrib-tool
	${__cmd_prefix} ${MONGO_VENV_DIRNAME}/bin/python3  -m pipx upgrade db-contrib-tool
	${__cmd_prefix} ${MONGO_VENV_DIRNAME}/bin/python3  -m pip install mtools
	)
}

mongo-venv()
{
	( set -e;
	__mongo-check-wrkdir;
	__mongo-parse-args $@;
    __mongo_variable_path;

	[[ -d  $MONGO_VENV_DIRNAME ]] || ${__cmd_prefix} /opt/mongodbtoolchain/${MONGO_TOOLCHAIN_VER}/bin/python3 -m venv ${MONGO_VENV_DIRNAME};

	case ${__mongo_branch} in
		v4.2)
			_mongo_update_venv_pip;;
		v4.4)
			_mongo_update_venv_pip;;
		v5.0)
			_mongo_update_venv_pip;;
		v6.0)
			_mongo_update_venv_pip;;
		v7.0)
			_mongo_update_venv_pip;;
		v8.0)
			_mongo_update_venv_poetry_v80;;
		v8.1)
			_mongo_update_venv_poetry_v81;;
		*)
			_mongo_update_venv_poetry_v81;;
	esac

	)
}

######################################################## Make Compile DB ########################################################################
_mongo_make_compile_db_scons()
{
	${__cmd_prefix} . ${MONGO_VENV_DIRNAME}/bin/activate;
	${__cmd_prefix} ninja compiledb $@
}

_mongo_make_compile_db_bazel()
{
	${__cmd_prefix} bazel run compiledb $@
}

mongo-make-compiledb ()
{
	( set -e;
	__mongo-check-wrkdir;
	__mongo-parse-args $@;
	__mongo_variable_path
	case ${__mongo_branch} in
		v4.*)
			_mongo_make_compile_db_scons ${__args[@]};;
		v5.*)
			_mongo_make_compile_db_scons ${__args[@]};;
		v6.*)
			_mongo_make_compile_db_scons ${__args[@]};;
		v7.*)
			_mongo_make_compile_db_scons ${__args[@]};;
		v8.0)
			_mongo_make_compile_db_scons ${__args[@]};;
		*)
			_mongo_make_compile_db_bazel ${__args[@]};;
	esac
	)
}

alias mongo-compiledb='mongo-make-compiledb'
alias mcompiledb='mongo-make-compiledb'

######################################################## Build ########################################################################

__mongo-configure-ninja ()
{
	( set -e;
	__mongo-check-wrkdir;
	__mongo-check-venv;
	__mongo-parse-args $@;
	__mongo_variable_path


	${__cmd_prefix} ./buildscripts/scons.py --variables-files=$MONGO_VARIABLE_PATH $=__build_mode_ninja ${__link_model} \
		--ninja generate-ninja "$ICECC_VAR" "$CCACHE_VAR" ${__args[@]}
	
	)
}

# Generates the `build.ninja` and `compile_commands.json` files, which are
# required by the underlying build system (i.e. Ninja) and the language server
# (i.e. ccls or clangd) respectively. The `mongo-build` function automatically
# generates these files when they do not exist. However, this function must be
# explicitly executed when a SCons configuration is changed (e.g. after adding
# or removing a source file) and consequently the `build.ninja` and
# `compile_commands.json` files must be recreated.
#
# Options:
#   - Branch: --master (default), --v5.3, --v5.0, --v4.4, --v4.2, --v4.0
#   - Compiler family: --clang (default), --gcc
#   - Compiling mode: --debug (default), --release
#   - Linking mode: --dynamic (default), --static
#   - All those of buildscripts/scons.py
mongo-configure ()
{
	( set -e;
	__mongo-check-wrkdir;
	__mongo-parse-args $@;

	__mongo-configure-ninja $@;
	mongo-make-compiledb $@ )
}

# Builds all the executables. If the `build.ninja` or `compile_commands.json`
# file is missing (e.g. at first run), it is automatically generated. Source
# files are also formatted before being compiled.
_mongo_build_scons()
{
	__mongo_variable_path

	[[ -f build.ninja ]] || __mongo-configure-ninja;
	[[ -f compile_commands.json ]] || mongo-make-compiledb;

	case ${__mongo_branch} in
	v4.*)
		__target=install-core;;;
	v5.*)
		__target=install-core;;;
	*)
		__target=install-devcore;;;
	esac

	[[ -n $1 ]] && __target=$1;

	${__cmd_prefix} ninja -l80 -j${JOBS} generated-sources ${__target} ${@:2}
}

_mongo_build_bazel()
{
	[[ -f compile_commands.json ]] || mongo-make-compiledb;
	__target=install-dist-test;
	[[ -n $1 ]] && __target=$1;
	[[ $__target = 'core' ]] && __target="install-devcore";
	[[ $__target = '--core' ]] && __target="install-devcore";
	${__cmd_prefix} bazel build $=__build_mode_bazel ${__target} --verbose_failures ${@:2}
}


mongo-build ()
{
	( set -e;
	__mongo-check-wrkdir;
	__mongo-parse-args $@;

	[[ ${__format} == 1 ]] && ${__cmd_prefix} mongo-format ${__mongo_branch};

	case ${__mongo_branch} in
		v4.*)
			_mongo_build_scons ${__args[@]};;
		v5.*)
			_mongo_build_scons ${__args[@]};;
		v6.*)
			_mongo_build_scons ${__args[@]};;
		v7.*)
			_mongo_build_scons ${__args[@]};;
		v8.0)
			_mongo_build_scons ${__args[@]};;
		*)
			_mongo_build_bazel ${__args[@]};;
	esac

	)
}

alias mbuild="mongo-build"
######################################################## Unit Test ########################################################################

_mongo_unit_scons()
{
	__mongo-check-mrlog;

	if [[ -n $1 ]]; 
	then
		${__cmd_prefix} mrlog -c -e ninja -- -f build.ninja -j12 +$1 ${@:2}
	else
		${__cmd_prefix} mrlog -c -e ${MONGO_VENV_DIRNAME}/bin/python3 -- ${MONGO_VENV_DIRNAME}/bin/python3 ./build/install/bin/resmoke.py run --jobs=12 --suite=unittests
	fi
}

_mongo_unit_bazel()
{
	if [[ -n $1 ]]; 
	then
		${__cmd_prefix} mrlog -c -e bazel -- test +$1 ${@:2}
	else
		${__cmd_prefix} mrlog -c -e bazel -- test --test_tag_filters=mongo_unittest,-intermediate_target --local_test_jobs=HOST_CPUS //src/...
	fi
}

mongo-unit()
{
	( set -e;
		__mongo-check-wrkdir;
		__mongo-parse-args $@;

		case ${__mongo_branch} in
			v4.*)
				_mongo_unit_scons  ${__args[@]};;
			v5.*)
				_mongo_unit_scons ${__args[@]};;
			v6.*)
				_mongo_unit_scons ${__args[@]};;
			v7.*)
				_mongo_unit_scons ${__args[@]};;
			v8.0)
				_mongo_unit_scons ${__args[@]};;
			*)
				_mongo_unit_bazel ${__args[@]};;
		esac
	)
}

######################################################## Benchmark Test ########################################################################

_mongo_benchmark_scons()
{
	${__cmd_prefix} mrlog -c -e ninja -- -j12 ./build/install/bin/$__args[1] && 
	${__cmd_prefix} mrlog -c -e ./build/install/bin/$__args[1] --  --benchmark_out_format=csv --benchmark_out="./$__args[1].csv"
}

_mongo_benchmark_bazel()
{
	echo "mongo-benchmark for bazel not yet implemented";
}

mongo-benchmark()
{
	( set -e;
		__mongo-check-wrkdir;
		__mongo-parse-args $@;

		if [[ -z "$__args[1]" ]]; then
			echo "Usage: mongo-benchmark <benchmark_name>" ;
			return 1;
		fi

		case ${__mongo_branch} in
			v4.*)
				_mongo_benchmark_scons $@;;
			v5.*)
				_mongo_benchmark_scons $@;;
			v6.*)
				_mongo_benchmark_scons $@;;
			v7.*)
				_mongo_benchmark_scons $@;;
			v8.0)
				_mongo_benchmark_scons $@;;
			*)
				_mongo_benchmark_bazel $@;;
		esac

		#open csv if visual studio code terminal is used
		[[ "$TERM_PROGRAM" == "vscode" ]] && ${__cmd_prefix} code -r ./$__args[1].csv
	)
}

######################################################## Code Format & lint ########################################################################

# Formats the source code according to the conversion adopted by all development
# teams.
#
# Options:
#   - Branch: --master (default), --v5.3, --v5.0, --v4.4, --v4.2, --v4.0
#   - All those of buildscripts/clang_format.py
mongo-format ()
{
	( set -e;
	__mongo-check-wrkdir;
	__mongo-check-venv;
	__mongo-parse-args $@;

	${__cmd_prefix} ./buildscripts/clang_format.py format-my

	)
}


mongo-lint-check ()
{
	( set -e;
	__mongo-check-wrkdir;
	__mongo-check-venv;
	__mongo-parse-args $@;
	__mongo_variable_path;

	${__cmd_prefix} ./buildscripts/scons.py --variables-files=$MONGO_VARIABLE_PATH lint
	)
}

mongo-code-analysis()
{
	__mongo-check-wrkdir;
	__mongo-check-venv;
	python3 buildscripts/iwyu/run_iwyu_analysis.py
}

######################################################## Local Test  ########################################################################
# Runs on the current machine the infrastructure to process the specified
# JavaScript test. This proposes the last commit comment as a description of the
# patch, however it also allows to provide a custom message.
#
# Options:
#   - Concurrency: --single-task (default), --multi-task
#   - All those of buildscripts/resmoke.py

__mongo_test_bazel()
{
	${__cmd_prefix} python buildscripts/resmoke.py run \
		--storageEngine=wiredTiger \
		--storageEngineCacheSizeGB=0.5 \
		--mongodSetParameters="$__log_component_verbosity" \
		--mongosSetParameters="$__log_component_verbosity" \
		--jobs=${__tasks} \
		--installDir bazel-bin/install-dist-test/bin \
		--log=file \
		$__fcv_opts \
		$__suite_opts \
		$@

		testresult=$?

		if [ ${testresult} -eq 0 ]; then
			echo "OK"
		else
			echo "FAILED"
		fi
		return ${testresult}
}

__mongo_test_scons()
{
	${__cmd_prefix} python ./build/install/bin/resmoke.py run \
		--storageEngine=wiredTiger \
		--storageEngineCacheSizeGB=0.5 \
		--mongodSetParameters="$__log_component_verbosity" \
		--mongosSetParameters="$__log_component_verbosity" \
		--jobs=${__tasks} \
		--log=file \
		$__fcv_opts \
		$__suite_opts \
		$@

		testresult=$?

		if [ ${testresult} -eq 0 ]; then
			echo "OK"
		else
			echo "FAILED"
		fi
		return ${testresult}
}

__mongo_test_single()
{
	case ${__mongo_branch} in
		v4.*)
			__mongo_test_scons $@;;
		v5.*)
			__mongo_test_scons $@;;
		v6.*)
			__mongo_test_scons $@;;
		v7.*)
			__mongo_test_scons $@;;
		v8.0)
			__mongo_test_scons $@;;
		*)
			__mongo_test_bazel $@;;
	esac
}

# Run a single test with default suite
mongo-test-locally() {
    (set -e
    __mongo-check-wrkdir
    __mongo-check-venv
    __mongo-parse-args $@

    ${__cmd_prefix} \rm -f executor.log fixture.log tests.log mrtests.log
    set +e

    echo "[TEST-LOCALLY] started.."
    __mongo_test_single "${__args[@]}"
    return $?
    )
}

# Run tests in a loop across suites, stopping on first failure
# Shared test suites arrays
SHARDING_SUITES=('sharding' 'sharding_last_lts' 'sharding_last_continuous' 'sharding_last_lts_mongos_and_mixed_shards')
CORE_SUITES=('replica_sets_jscore_passthrough' 'sharding_jscore_passthrough' 'sharded_collections_jscore_passthrough' 'sharding_api_version_jscore_passthrough')
mongo-test-locally-loop() {
    (set -e
    __mongo-check-wrkdir
    __mongo-check-venv
    __mongo-parse-args $@

    ${__cmd_prefix} \rm -f executor.log fixture.log tests.log mrtests.log
    set +e

    echo "[TEST-LOCALLY-LOOP] started.."
    
    # Extract test path from arguments
    local test_path=""
    for arg in "${__args[@]}"; do
        if [[ "$arg" == *".js" ]]; then
            test_path="$arg"
            break
        fi
    done

    if [[ -z "$test_path" ]]; then
        echo "[TEST-LOCALLY-LOOP] Error: No test file specified"
        return 1
    fi
    
    # Determine test type and corresponding suites
    local suites=()
    for arg in "${__args[@]}"; do
        if [[ "$arg" == *"jstests/sharding"* ]]; then
            echo "[TEST-LOCALLY-LOOP] detected sharding test"
            suites=("${SHARDING_SUITES[@]}")
            break
        elif [[ "$arg" == *"jstests/core"* ]]; then
            echo "[TEST-LOCALLY-LOOP] detected core test"
            suites=("${CORE_SUITES[@]}")
            break
        fi
    done

    # If no specific test type detected, run with default suite only
    if [ ${#suites[@]} -eq 0 ]; then
        echo "[TEST-LOCALLY-LOOP] no specific test type detected, running default suite only"
        suites=("default")
    fi

    # Run test for each suite
    for suite in "${suites[@]}"; do
        echo -e "\n[TEST-LOCALLY-LOOP] Running suite: \033[1m$suite\033[0m"
		__suite_opts="--suite=$suite";
        __mongo_test_single "${__args[@]}"
        
        if [ $? -ne 0 ]; then
            echo -e "\n\033[1;31m[TEST-LOCALLY-LOOP] ❌ Test failed in suite: $suite\033[0m"
            echo -e "\nTo reproduce this failure, run:"
            echo -e "\033[1mmongo-test-locally ${test_path} --suite $suite\033[0m"
            
            # Save failure info
            echo "Failed suite: $suite" > ./.testdata/failure_info.txt
            echo "Reproduction command: mongo-test-locally ${test_path} --suite $suite" >> ./.testdata/failure_info.txt
            
            return 1
        else
            echo -e "\033[1;32m[TEST-LOCALLY-LOOP] ✓ Suite $suite passed\033[0m"
        fi
    done

    echo -e "\n\033[1;32m[TEST-LOCALLY-LOOP] ✓ All suites passed successfully\033[0m"
    return 0
    )
}

######################################################## Evergreen Patch ########################################################################

# Runs an evergreen patch
# Options:
#   --burn-in prepares a burn-in only patch
#	--required (default) prepares a patch with the required variant pre-selected
mongo-run-patch ()
{
	( set -e;
	__mongo-check-wrkdir;
	__mongo-parse-args $@;

		__preselect='-a required'
		[[ -n $__burn_in ]] && __preselect='--variants all --tasks burn_in_tags_gen';
		${__cmd_prefix} evergreen patch \
				--project mongodb-mongo-${__mongo_branch} \
				--skip_confirm \
				--auto-description $=__preselect \
				--finalize \
				${__args[@]} 

	)
}

# Creates a new Evergreen path where it is possible to select the specific
# suites to run. 
# Usage: mongo-set-patch 
# Options:
#   --burn-in prepares a burn-in only patch
#	--required (default) prepares a patch with the required variant pre-selected
mongo-set-patch()
{
( set -e;
	__mongo-check-wrkdir;
	__mongo-parse-args $@;
	
	msg="No description"
	if [[ ${__cmd_prefix} != echo ]]; then
		echo "patch description: ${msg}, Do you want change the description of this Evergreen patch? [y/N]"
		read -r _reply;
		if [[ ${_reply} =~ (y|Y|yes) ]]; then
			echo "Type the custom title: " 
			read -r _input_description;
			msg="$_input_description"
		fi;
	fi;

	${__cmd_prefix} evergreen patch \
			--project mongodb-mongo-${__mongo_branch} \
			--skip_confirm \
			-a required ${__finalize} \
			--description "$(git branch --show-current):${msg}" \
			${__args[@]} 

	)
}

#Note: this function could be just added as part of mongo-run-patch
#However, since the --project option changes, it would become more complex. 
#Therefore, I decided to keep it separate.
mongo-set-patch-workload()
{
	( set -e;
	__mongo-check-wrkdir;
	__mongo-check-venv;
    __mongo-parse-args $@;

	if [[ -z ${__args[1]} ]]; then
		_sys_perf="sys-perf"
		[[ $__mongo_branch != "master" ]] && _sys_perf="sys-perf-${__mongo_branch#*v}"

		${__cmd_prefix} evergreen patch -p $_sys_perf
		echo "COPY THE ID OF THE PATCH AND RUN: mongo-run-patch-workload <patch_id>"
	else
		${__cmd_prefix} cd $HOME/workload; git pull origin master #update the workloads
		${__cmd_prefix} evergreen set-module -m workloads -i ${__args[1]} #add the workloads to the patch
		${__cmd_prefix} cd - 
	fi
	)

}

alias mongo-spin-shard1='mongo-test-locally --suite=sharding $mongows/jstests/spin-cluster.js'
alias mongo-spin-shard2='mongo-test-locally --suite=sharding $mongows/jstests/spin-cluster-2.js'
alias mongo-spin-shard2-balanced='mongo-test-locally --suite=sharding $mongows/jstests/spin-cluster-2-balanced.js'


######################################################## General Utility ########################################################################

#downloag last LTS and last continuous version of mongo to enable multiversion local testing
mongo-enable-multiversion()
{
	( set -e;
	__mongo-check-wrkdir;
	__mongo-parse-args $@;

	#remove first "v" from __mongo_branch. In case is master => master, in case is vX.Y => X.Y
	local version=${__mongo_branch#*v}
	
	${__cmd_prefix} . ${MONGO_VENV_DIRNAME}/bin/activate;
	${__cmd_prefix} db-contrib-tool setup-repro-env $version --linkDir ./build/install/bin/  --installLastLTS --installLastContinuous )
}

# Deletes all files generated by running `mongo-build` function (i.e.
# executables and object files). However, it does not delete the files
# corresponding to the build configuration (i.e. `build.ninja` and
# `compile_commands.json`).
#
# Options:
#   - Branch: --master (default), --v5.3, --v5.0, --v4.4, --v4.2, --v4.0
#   - Compiler family: --clang (default), --gcc
#   - Executables to delete: --all (default), --core
#   - All those of buildscripts/scons.py
mongo-clean-ninja ()
{
	( set -e;
	__mongo-check-wrkdir;
	__mongo-parse-args $@;

	${__cmd_prefix} ninja -t clean;
	${__cmd_prefix} ccache -c

	)
}

mongo-debug ()
{
	( set -e;
	__mongo-parse-args $@;
	__mongo_variable_path 

	echo __cmd_prefix=${__cmd_prefix};
	echo __mongo_branch=${__mongo_branch};
	echo __toolchain=${__toolchain};
	echo __build_mode=${__build_mode};
	echo __link_model=${__link_model};
	echo __format=${__format};
	echo __tasks=${__tasks};
	echo __fcv_opts=${__fcv_opts};
	echo __log_component_verbosity=${__log_component_verbosity}
	echo "MONGO_VARIABLE_PATH=${MONGO_VARIABLE_PATH}"
	echo "ICECC_VAR=${ICECC_VAR}"
	echo "CCACHE_VAR=${CCACHE_VAR}"
    echo "JOBS=${JOBS}"
	echo __args=${__args} )
}

# usage: mongo-backport COMMIT_HASH BACKPORT_TICKET --branch vX.Y
# Note original branch is only used to checkout back to the current branch.
mongo-backport ()
{
	( set -e;
	__mongo-parse-args $@;
	__mongo_variable_path 

	CAR_STAFFS=("dgomezferro" "kaloianm" "jordist" "sulabhM")
	REVIEWER=${CAR_STAFFS[ $RANDOM % ${#CAR_STAFFS[@]} ]}

	COMMIT=${__args[1]}
	TARGET_BRANCH=$__mongo_branch
	BACKPORT_TICKET=${__args[2]}
	git fetch
	ORIGINAL_BRANCH=`git branch --show-current`
	git checkout --ignore-other-worktrees $TARGET_BRANCH
	git pull
	ORIGINAL_COMMIT_MESSAGE=`git log --format=%B -n 1 $COMMIT`
	ORIGINAL_TICKET=`echo $ORIGINAL_COMMIT_MESSAGE | sed -n 's/^SERVER-[0-9]*/&/p' | cut -d' ' -f1`
	BRANCH_NAME=backport/$ORIGINAL_TICKET/$TARGET_BRANCH/$BACKPORT_TICKET
	git checkout -B $BRANCH_NAME
	git cherry-pick $COMMIT
	git push --set-upstream origin $BRANCH_NAME
	EVG_LINK=`evergreen patch --project mongodb-mongo-$TARGET_BRANCH --alias required --auto-description --yes --finalize | grep Build | sed -E 's;.*(https.*).*;\1;g'`
	PR_LINK=`gh pr create --base $TARGET_BRANCH --fill --reviewer $REVIEWER --assignee @me | grep https`
	gh pr comment $PR_LINK --body "[evg](${EVG_LINK})"
	git checkout $ORIGINAL_BRANCH
	git branch -d $BRANCH_NAME
	echo
	echo
	echo ========
	echo Link to the PR: $PR_LINK
	echo ========
	)
}

######################################################## Shared Helpers ########################################################################

###
### Global settings
###

MONGO_VENV_DIRNAME=${MONGO_VENV_DIRNAME:-'.venv'}
ICECC_VAR="ICECC=icecc"
CCACHE_VAR="CCACHE=ccache"
JOBS=400

#do not set icecc if command is not found
if ! command -v icecc &> /dev/null; then
	ICECC_VAR=""
fi

#set homebrew path for ccache in case of macos
[[ -n "$_is_macos" ]] && CCACHE_VAR="CCACHE=/opt/homebrew/bin/ccache"

###
### Internal functions
###

__mongo_variable_path ()
{	
	MONGO_TOOLCHAIN_VER="v4"
	case ${__mongo_branch} in
		v4.2)
			MONGO_TOOLCHAIN_VER="v3";;
		v4.4)
			MONGO_TOOLCHAIN_VER="v3";;
		v5.0)
			MONGO_TOOLCHAIN_VER="v3";;
		v6.0)
			MONGO_TOOLCHAIN_VER="v3";;
		v7.0)
			MONGO_TOOLCHAIN_VER="v4";;
		v8.0)
			MONGO_TOOLCHAIN_VER="v4";;
		*)
			MONGO_TOOLCHAIN_VER="v5";;
	esac

	MONGO_VARIABLE_PATH=${MONGO_VARIABLE_PATH:-"etc/scons/mongodbtoolchain_${MONGO_TOOLCHAIN_VER}_${__toolchain}.vars"}
	if [ -n "$_is_macos" ]; then
		MONGO_VARIABLE_PATH="etc/scons/xcode_macosx.vars"
		[ -n "$_is_arm" ] && MONGO_VARIABLE_PATH="etc/scons/xcode_macosx_arm.vars"
	fi
}

__mongo-check-mrlog()
{
    if ! [ "$(command -v mrlog)" ]; then
        echo "mrlog not found, please install mrlog or run `mongo-setup-tools` )."
        return 1
    fi

	return 0
}

__mongo-check-wrkdir ()
{
	if [[ ! -d buildscripts ]]; then
		echo "ERROR: ${PWD} is not a mongo working directory" 1>&2;
		return 1;
	fi
}

__mongo-check-venv ()
{
	if [[ -z ${VIRTUAL_ENV} ]]; then
		if [[ -d ./${MONGO_VENV_DIRNAME} ]]; then
			echo "NOTE: Implicit activation of Python virtual environment";
			. ${MONGO_VENV_DIRNAME}/bin/activate;
		else
			echo "ERROR: No Python virtual environment to activate" 1>&2;
			return 1;
		fi
	fi
}

__mongo-set-branch() {
    local current_dir=${PWD##*/}
    local version_pattern="mongo-v([0-9]+)\\.([0-9]+)"
    if [[ $current_dir =~ $version_pattern ]]; then
        local major_version="${match[1]}"
        local minor_version="${match[2]}"
        __mongo_branch="v$major_version.$minor_version"
    else
        __mongo_branch="master"
    fi
}

__mongo-parse-args ()
{
	[[ -z ${__parsed_args} ]] && __parsed_args=true || return 0;

	__mongo-set-branch;
	__cmd_prefix=;
	__toolchain=clang;

	__build_mode_scons='--opt=on --dbg=on';
	__build_mode_bazel='--config=fastbuild';
	__link_model="--link-model=dynamic";
	__format=0;
	__tasks=1;
	__test_extra_options=;
	__log_component_verbosity='{logComponentVerbosity: {verbosity: 0}}'
	__args=();

	while [[ $# -gt 0 ]]; do
		case $1 in
			--echo)
				__cmd_prefix=echo;
				shift
			;;
			--local)
				ICECC_VAR=""
                JOBS=12
				shift
			;;
			--v3.*) # v3.6, v3.6.3, etc
				echo "ERROR: v3.x is not supported anymore"
				return 1
				shift
			;;
			--verbose)
				echo "enabling verbosity level 2"
				__log_component_verbosity='{logComponentVerbosity: {verbosity: 2}}';
				shift
			;;
			--v*)
				__mongo_branch=${1#*--}
				shift
			;;
			--master)
				__mongo_branch=master;
				shift
			;;
			--clang)
				__toolchain=clang;
				shift
			;;
			--gcc)
				__toolchain=gcc;
				shift
			;;
			--debug)
				__build_mode_scons="--opt=off --dbg=on";
				__build_mode_bazel="--config=dbg";
				shift
			;;
			--opt)
				__build_mode_scons="--opt=off --dbg=on";
				__build_mode_bazel="--config=opt";
				shift
			;;
			--benchmark)
				__build_mode_scons="--opt=off --dbg=off";
				__build_mode_bazel="--config=fastbuild";
				shift
			;;
			--sanitize-address)
				__build_mode_scons="--opt=on --dbg=on --sanitize=address --allocator=system";
				__build_mode_bazel="--config=dbg_aubsan";
				shift
			;;
			--sanitize-thread)
				__build_mode_scons="--opt=on --dbg=on --sanitize=thvared";
				__build_mode_bazel="--config=dbg_tsan";
				shift
			;;
			--release)
				__build_mode_scons="--opt=on --dbg=off";
				__build_mode_bazel="--config=fastbuild";
				shift
			;;
			--dynamic)
				__link_model='--link-model=dynamic';
				shift
			;;
			--static)
				__link_model='--link-model=static';
				shift
			;;
			--format)
				__format=1;
				shift
			;;
			--no-format)
				__format=0;
				shift
			;;
			--mono-task)
				__tasks=1;
				shift
			;;
			--multi-task)
				__tasks=`cat /proc/cpuinfo | grep processor | wc -l`;
				shift
			;;
			--featureFlag*)
				echo "enabling feature flag ${1#*--}"
				__fcv_opts="--additionalFeatureFlags=${1#*--}"
				shift
			;;
			--loop-complete)
				__loop_fcv=true;
				__loop_suites=true;
				shift		
			;;
			--loop-fcv)
				__loop_fcv=true;
				shift
			;;
			--loop-suites)
				__loop_suites=true;
				shift
			;;
			--burn-in)
				__burn_in=true;
				shift;
			;;
			--required)
				__required=true;
				shift;
			;;
			*)
				__args+=($1);
				shift
			;;
		esac;
	done;
}
